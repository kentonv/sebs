# Scalable Extendable Build System
# Copyright (c) 2009 Kenton Varda and contributors.  All rights reserved.
# Portions copyright Google, Inc.
# http://code.google.com/p/sebs
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of the SEBS project nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The standard builtin "sebs" conflicts with a target defined in this file.
_sebs = sebs

python = _sebs.import_("python.sebs")

sebs_lib = python.Library([
  "__init__.py",
  "core.py",
  "filesystem.py",
  "helpers.py",
  "loader.py",
  "builder.py",
  "main.py"])

sebs = python.Binary(
  name = "sebs",
  main = "sebs.main",
  srcs = [ "main.py" ],
  deps = [ sebs_lib ])

command_test = python.Test("command_test.py", deps = [sebs_lib])
core_test = python.Test("core_test.py", deps = [sebs_lib])
filesystem_test = python.Test("filesystem_test.py", deps = [sebs_lib])
helpers_test = python.Test("helpers_test.py", deps = [sebs_lib])
loader_test = python.Test("loader_test.py", deps = [sebs_lib])
builder_test = python.Test("builder_test.py", deps = [sebs_lib])

# TODO(kenton):  Move elsewhere.
import os
class ShellTest(_sebs.Test):
  def __init__(self, src):
    super(ShellTest, self).__init__()
    self.src = src

  def _expand(self):
    main_artifact = self.context.source_artifact(self.src)
    action = self.context.action(self, "test", main_artifact.filename)

    output = self.context.intermediate_artifact(
      os.path.splitext(self.src)[0] + "_output.txt", action)
    result = self.context.memory_artifact(
      os.path.splitext(self.src)[0] + "_result", action)

    action.set_command(
        _sebs.SubprocessCommand([main_artifact], [main_artifact], [],
                                capture_stdout = output,
                                capture_stderr = output,
                                capture_exit_status = result))

    self.test_result_artifact = result
    self.test_output_artifact = output
    self.outputs = []

cpp_test = ShellTest("cpp_test/cpp_test.sh")
